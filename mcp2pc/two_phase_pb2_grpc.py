# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import two_phase_pb2 as two__phase__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in two_phase_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CoordinatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Prepare = channel.unary_stream(
                '/mcp2pc.Coordinator/Prepare',
                request_serializer=two__phase__pb2.PrepareRequest.SerializeToString,
                response_deserializer=two__phase__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/mcp2pc.Coordinator/Commit',
                request_serializer=two__phase__pb2.CommitRequest.SerializeToString,
                response_deserializer=two__phase__pb2.Empty.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/mcp2pc.Coordinator/Abort',
                request_serializer=two__phase__pb2.AbortRequest.SerializeToString,
                response_deserializer=two__phase__pb2.Empty.FromString,
                _registered_method=True)


class CoordinatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Prepare': grpc.unary_stream_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=two__phase__pb2.PrepareRequest.FromString,
                    response_serializer=two__phase__pb2.PrepareResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=two__phase__pb2.CommitRequest.FromString,
                    response_serializer=two__phase__pb2.Empty.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=two__phase__pb2.AbortRequest.FromString,
                    response_serializer=two__phase__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp2pc.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp2pc.Coordinator', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mcp2pc.Coordinator/Prepare',
            two__phase__pb2.PrepareRequest.SerializeToString,
            two__phase__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Coordinator/Commit',
            two__phase__pb2.CommitRequest.SerializeToString,
            two__phase__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Coordinator/Abort',
            two__phase__pb2.AbortRequest.SerializeToString,
            two__phase__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ShardStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Prepare = channel.unary_unary(
                '/mcp2pc.Shard/Prepare',
                request_serializer=two__phase__pb2.PrepareRequest.SerializeToString,
                response_deserializer=two__phase__pb2.PrepareResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/mcp2pc.Shard/Commit',
                request_serializer=two__phase__pb2.CommitRequest.SerializeToString,
                response_deserializer=two__phase__pb2.Empty.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/mcp2pc.Shard/Abort',
                request_serializer=two__phase__pb2.AbortRequest.SerializeToString,
                response_deserializer=two__phase__pb2.Empty.FromString,
                _registered_method=True)
        self.Rollback = channel.unary_unary(
                '/mcp2pc.Shard/Rollback',
                request_serializer=two__phase__pb2.RollbackRequest.SerializeToString,
                response_deserializer=two__phase__pb2.Empty.FromString,
                _registered_method=True)
        self.LockOnChain = channel.unary_unary(
                '/mcp2pc.Shard/LockOnChain',
                request_serializer=two__phase__pb2.LockRequest.SerializeToString,
                response_deserializer=two__phase__pb2.TxHash.FromString,
                _registered_method=True)
        self.CommitOnChain = channel.unary_unary(
                '/mcp2pc.Shard/CommitOnChain',
                request_serializer=two__phase__pb2.OnChainRequest.SerializeToString,
                response_deserializer=two__phase__pb2.TxHash.FromString,
                _registered_method=True)
        self.ReclaimOnChain = channel.unary_unary(
                '/mcp2pc.Shard/ReclaimOnChain',
                request_serializer=two__phase__pb2.OnChainRequest.SerializeToString,
                response_deserializer=two__phase__pb2.TxHash.FromString,
                _registered_method=True)


class ShardServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Prepare(self, request, context):
        """off‐chain 2PC RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rollback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockOnChain(self, request, context):
        """on‐chain adapter RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitOnChain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReclaimOnChain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShardServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=two__phase__pb2.PrepareRequest.FromString,
                    response_serializer=two__phase__pb2.PrepareResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=two__phase__pb2.CommitRequest.FromString,
                    response_serializer=two__phase__pb2.Empty.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=two__phase__pb2.AbortRequest.FromString,
                    response_serializer=two__phase__pb2.Empty.SerializeToString,
            ),
            'Rollback': grpc.unary_unary_rpc_method_handler(
                    servicer.Rollback,
                    request_deserializer=two__phase__pb2.RollbackRequest.FromString,
                    response_serializer=two__phase__pb2.Empty.SerializeToString,
            ),
            'LockOnChain': grpc.unary_unary_rpc_method_handler(
                    servicer.LockOnChain,
                    request_deserializer=two__phase__pb2.LockRequest.FromString,
                    response_serializer=two__phase__pb2.TxHash.SerializeToString,
            ),
            'CommitOnChain': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitOnChain,
                    request_deserializer=two__phase__pb2.OnChainRequest.FromString,
                    response_serializer=two__phase__pb2.TxHash.SerializeToString,
            ),
            'ReclaimOnChain': grpc.unary_unary_rpc_method_handler(
                    servicer.ReclaimOnChain,
                    request_deserializer=two__phase__pb2.OnChainRequest.FromString,
                    response_serializer=two__phase__pb2.TxHash.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp2pc.Shard', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp2pc.Shard', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Shard(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/Prepare',
            two__phase__pb2.PrepareRequest.SerializeToString,
            two__phase__pb2.PrepareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/Commit',
            two__phase__pb2.CommitRequest.SerializeToString,
            two__phase__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/Abort',
            two__phase__pb2.AbortRequest.SerializeToString,
            two__phase__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rollback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/Rollback',
            two__phase__pb2.RollbackRequest.SerializeToString,
            two__phase__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LockOnChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/LockOnChain',
            two__phase__pb2.LockRequest.SerializeToString,
            two__phase__pb2.TxHash.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitOnChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/CommitOnChain',
            two__phase__pb2.OnChainRequest.SerializeToString,
            two__phase__pb2.TxHash.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReclaimOnChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp2pc.Shard/ReclaimOnChain',
            two__phase__pb2.OnChainRequest.SerializeToString,
            two__phase__pb2.TxHash.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
